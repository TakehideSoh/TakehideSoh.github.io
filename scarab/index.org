#+TITLE: Scarab: a SAT-based CP System
#+AUTHOR: Takehide Soh
#+INCLUDE: "./title.html" quote
#+OPTIONS: ^:nil toc:nil H:2 num:nil

#+HTML_HEAD: <!-- Global site tag (gtag.js) - Google Analytics -->
#+HTML_HEAD: <script async src="https://www.googletagmanager.com/gtag/js?id=UA-6313627-5"></script>
#+HTML_HEAD: <script>
#+HTML_HEAD:   window.dataLayer = window.dataLayer || [];
#+HTML_HEAD:  function gtag(){dataLayer.push(arguments);}
#+HTML_HEAD:  gtag('js', new Date());
#+HTML_HEAD:  gtag('config', 'UA-6313627-5');
#+HTML_HEAD: </script>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../myhome.css" />

#+STYLE: <style type="text/css">
#+STYLE:<!--/*--><![CDATA[/*><!--*/
#+STYLE: div.figure { float:left; }
#+STYLE: /*]]>*/-->
#+STYLE: </style>

日本語ページは[[./jp/index.html][こちら]]．

* Overview
This page details *Scarab*, a prototyping tool for developing SAT-based systems. 
Features of Scarab are follows:

- *Expressiveness* Rich constraint modeling language.
- *Efficiency* Optimized order encoding and native handling of BC/PB on Sat4j.
- *Customizability* Its core part is written in around 1000 lines of Scala.
- *Portability* Run on JVM.

** How to use it
  - Download the latest jar (According to your Scala version select
    appropriate one).  
    - (for Scala 2.12.*) use [[file:jars/scarab-v196-s212.jar]]
    - (for Scala 2.11.*) use [[file:jars/scarab-v196-s211.jar]]
    - (for Scala 2.10.*) use [[file:jars/scarab-v196-s210.jar]]
    
  - For more detail (including source files), please refere the
    following Commit ID 30315e9 of https://github.com/TakehideSoh/Scarab

#+ATTR_HTML: :alt image :title Action! :align right
[[./figs/latin5-diagonal.gif]]
  - Write your own Scarab program. For instance, let's write a program solving Pandiagonal Latin Square *PLS(n)*.  
    - a problem of placing different $n$ numbers into $n \times n$ matrix
    - such that each number is occurring exactly once
    - for each row, column, diagonally down right, and diagonally up right.
#+HTML: <br style="clear:both;" />
 #+BEGIN_SRC scala
import jp.kobe_u.scarab._ ; import dsl._ 

var n: Int = 5
for (i <- 1 to n; j <- 1 to n)  int('x(i,j),1,n) 
for (i <- 1 to n) {
  add(alldiff((1 to n).map(j => 'x(i,j))))
  add(alldiff((1 to n).map(j => 'x(j,i))))
  add(alldiff((1 to n).map(j => 'x(j,(i+j-1)%n+1))))
  add(alldiff((1 to n).map(j => 'x(j,(i+(j-1)*(n-1))%n+1))))}

if (find)  println(solution.intMap)
 #+END_SRC
  - Sava this program as *pls.sc*.
  - To run *pls.sc*, just execute it as follows, that's all ! 
  #+BEGIN_SRC sh
   scala -cp scarab<$version>.jar pls.sc
  #+END_SRC


# Scarab package (lib/scarab-<version>.jar) includes [[http://www.sat4j.org][Sat4j]] package and
# [[http://bach.istc.kobe-u.ac.jp/sugar/][Sugar]] for the ease of use.
# We really appreciate the developers of Sat4j!

# ** [[./scarab-v1-5-4.jar][JAR of Scarab]] -- Version 1.5.4 (compiled by Scala 2.11.1)
# ** This software is distributed under the [[http://opensource.org/licenses/bsd-license.php][BSD License]]. See [[./LICENSE][LICENSE]] file.

** More resources
   - you can find more examples [[./examples.html]["example" page]].
   - you can also find more documents [[./doc.html]["documents" page]].

** Note
  - This software is distributed under the [[http://opensource.org/licenses/bsd-license.php][BSD License]]. See [[./LICENSE][LICENSE]] file.
  - scarab-<version>.jar includes [[http://www.sat4j.org][Sat4j]] package and [[http://bach.istc.kobe-u.ac.jp/sugar/][Sugar]] for the ease of use.
    - We really appreciate the developers of Sat4j and Sugar!
    - Sat4j used for inference engine.
    - Sugar used for preprocessor (from 1.5.4). 

* Release Note
# @@html:<div align="center"><b>To run Scarab, <font color="red" size="+0">Scala
# 2.11.* or higher (versions after 1.1.1 no longer work on 2.10.*) </font> is required.</b></div>@@ 
*** <2019-02-11 月> Organize web materials. 
*** See history until 2016 [[./history.html][here]]. 



* COMMENT Introduction
This web page details *Scarab* system which is a prototyping tool for
developing SAT-based systems. It provides a rich constraint modeling
language on Scala and enables a programmer to rapidly specify problems
and to experiment with different modelings.
** *Expressiveness:* 
   - Scarab DSL can concisely write constraint modelings with the help of rich functionalities of Scala.
   - The expressiveness of Scarab will be also shown by some prototyping examples for an optimization version of Square Packing.
** *Efficiency:* 
   - Scarab can be efficient in the sense that it uses an optimized version of the order encoding which an award-winning CSP solver [[http://bach.istc.kobe-u.ac.jp/sugar/][Sugar]] adopted.
   - Scarab also can utilize current state-of-the-art SAT techniques.
** *Customizability:* 
   - Scarab allows a programmer to customize his/her own constraints and to customize the search strategies.
   - Scarab itself can be also customizable since it is *500* lines
     (800 lines in version 1.0.4) long without any comments.
   - In particular, our core part of order encoding module is only *25* lines long.
** *Portability:* 
   - The current version of Scarab adopts [[http://www.sat4j.org][Sat4j]] as the back-end SAT solver. 
   - The combination of Scarab and Sat4j makes it possible to develop portable SAT-based systems that run on any platform supporting Java.

* COMMENT How ot Install Scarab
  @@html:<font color="red" size="+0"><b>Requirements: </font></b>@@ [[http://java.com/][Java]] JRE and  [[http://www.scala-lang.org/][Scala]] Version @@html:<font color="red" size="+0"><b>2.11.*</font></b>@@ or higher is required.
** Download Scarab
** Unpack scarab-$VERSION.zip
** To run an example of Pandiagonal Latin Square of size 5, just execute it as follows, that's all ! 
  #+BEGIN_SRC sh
   cd examples
   scala -cp ../lib/scarab-$VERSION.jar PLS-AD.scala 5
  #+END_SRC


* COMMENT Guide to Contents
** If you want to get Scarab sources, please check below of this web page.
** for *more details of Scarab*, please see [[./doc.html][Documents]]
   - Process flow, Syntax, Scarab API document, Class diagram
** for *quick examples*, please see [[./examples.html][Examples]]
   - Square Packing, Latin Square, Magic Square, etc...
** for *advanced usage* of Scarab, please see [[./advanced.html][Advanced Usage]]
   - Customizing Alldiff and implement optimization strategies


* Publications
  - Scarab: A Rapid Prototyping Tool for SAT-based Constraint Programming Systems
    - Takehide Soh, Naoyuki Tamura, and Mutsunori Banbara
    - In the Proceedings of the 16th International Conference on Theory and Applications of Satisfiability Testing (SAT 2013), LNCS 7962, pp. 429-436, 2013.
  - System Architecture and Implementation of a Prototyping Tool for SAT-based Constraint Programming Systems
    - Takehide Soh, Naoyuki Tamura, Mutsunori Banbara, Daniel Le Berre, and Stéphanie Roussel
    - In the Proceedings of Pragmatics of SAT 2013 (PoS-13), 14 pages, July 2013.


* Links for Related Tool

| [[http://www.sat4j.org][Sat4j]]      | SAT solver in Java, which Scarab adopts!                                     |
| [[http://bach.istc.kobe-u.ac.jp/sugar/][Sugar]]      | SAT-based CSP Solver using order encoding.                                   |
| [[http://bach.istc.kobe-u.ac.jp/copris/][Copris]]     | Copris is a constraint programming DSL embedded in Scala.                    |
|            | It is also developed by our team!                                            |
| [[http://numberjack.ucc.ie][Numberjack]] | Constraint Programming System in Python                                      |
| [[http://lara.epfl.ch/web2010/scp][SCP]]        | Constraint Programming in Scala using Z3                                     |
| [[http://code.google.com/p/scalasmt/][scalasmt]]   | SMT in Scala using Z3                                                        |
| [[https://bitbucket.org/oscarlib/oscar][OscaR]]      | OR in Scala                                                                  |
| [[http://jacop.osolpro.com/][JaCoP]]      | Constraint programming in Java and Scala                                     |
| [[http://www.emn.fr/x-info/choco-solver/][Choco]]      | Constraint programming in Java                                               |
| [[http://jcp.org/en/jsr/detail?id%3D331][JSR 331]]    | Java Specification Requests: Constraint Programming API                      |
| [[http://amit.metodi.me/research/bee/][BEE]]        | a compiler which enables to encode finite domain constraint problems to CNF. |
| [[http://jason.matf.bg.ac.rs/~mirkos/Mesat.html][meSAT]]      | Multiple Encodings of CSP to SAT                                             |






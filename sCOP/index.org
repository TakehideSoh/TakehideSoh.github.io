#+TITLE: sCOP: a SAT-based CP System
#+AUTHOR: Takehide Soh
#+OPTIONS: ^:nil toc:nil H:2 num:nil

#+HTML_HEAD: <!-- Global site tag (gtag.js) - Google Analytics -->
#+HTML_HEAD: <script async src="https://www.googletagmanager.com/gtag/js?id=UA-6313627-5"></script>
#+HTML_HEAD: <script>
#+HTML_HEAD:   window.dataLayer = window.dataLayer || [];
#+HTML_HEAD:  function gtag(){dataLayer.push(arguments);}
#+HTML_HEAD:  gtag('js', new Date());
#+HTML_HEAD:  gtag('config', 'UA-6313627-5');
#+HTML_HEAD: </script>

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../myhome.css" />

#+STYLE: <style type="text/css">
#+STYLE:<!--/*--><![CDATA[/*><!--*/
#+STYLE: div.figure { float:left; }
#+STYLE: /*]]>*/-->
#+STYLE: </style>

* Overview of sCOP
  - sCOP is a Sat-based COnstraint Programming system written in Scala
    2.12.
  - sCOP aims to be a re-implementation of [[http://bach.istc.kobe-u.ac.jp/sugar/][Sugar]] (Tamura et al.)
    written in Java. Currently, main differences are as follows: 
    - Encoding of extensional constraints is different between the two systems.
    - Some of encoding heuristics is different between the two systems.
  - It works as follows:
    1. encode a XCSP3 file into a DIMACS CNF file.
    2. launch a SAT solver to solve the encoded CNF file.
    3. the output of the SAT solver is decoded to the solution of the
       XCSP3 instance. 

* Reference
  - sCOP: SAT-based Constraint Programming System. Takehide Soh,
    Daniel Le Berre, Mutsunori Banbara, Naoyuki Tamura. 
    In Proceedings of XCSP3 Competition 2018, 93--94, 2018. http://www.cril.univ-artois.fr/XCSP18/files/XCSP3_2018_Proceedings.pdf

* Download
  - [[file:scop-for-xcsp18-180731.tar.gz][the version submitted to XCSP18]]

* Components of sCOP
  - scop.jar
    - It is a fat jar containing all resources except SAT solvers
      - XCSP3-Java-Tools (https://github.com/xcsp3team/XCSP3-Java-Tools)
      - scop
      - scala standard libraries (version 2.12)

  - scop.sh
    - It is a wrapper for XCSP18. 

  - MapleCOMSPS
    - It is an award-winning SAT solver downloaded from the following
      URL.
    - Note that there are several versions of MapleCOMSPS in the
      official web page. The one we used is only available in the
      exactly the same URL as follows.
    - Note again, we used "simp" not "core".
    - https://sites.google.com/a/gsd.uwaterloo.ca/maplesat/MapleCOMSPS.zip

  - glucose-syrup
    - It is an award-winning SAT solver downloaded from the following
      URL.
    - Note that we used the version submitted to the SAT competition 2017.
    - https://baldur.iti.kit.edu/sat-competition-2017/solvers/parallel/syrup.zip

* Requirements for sCOP
  - Java 8
  - (Note) Scala 2.12 is not necessary since scop.jar is a fat jar
    containing scala standard libraries.

* Notations in the following
| DIR       | It stands for the directory where you place scop-for-xcsp18          |
| TMPDIR    | It is the directory where the solver is allowed to                   |
|           | create temporary files                                               |
| BENCHNAME | It stands for the name of the instance file (with its extension)     |
| NBCORE    | It stands for the number of processing units allocated to the solver |

* How to install
  - We need to compile 2 SAT solvers respectively for sequential
    solving and parallel solving. 

** (Sequential CSP) MapleCOMSPS
#+BEGIN_SRC sh
cd DIR/MapleCOMSPS
export MROOT=`pwd`
cd simp
make clean
make r
#+END_SRC

** (Parallel CSP) glucose-syrup
#+BEGIN_SRC sh
cd DIR/syrup
make clean
make
#+END_SRC

** lzma (os command)
   - we assume an os command 'lzma' is available for decomposing *.xml.lzma instances.
   - If there is not 'lzma' then simply give *.xml to scop.

* How to run
  - (NOTE) we here assume 11GB/22GB can be allocated to JVM. This is
    XCSP18 competition setting but larger heap size is better in
    principal.
  - assume that the following command is executed in the 'scop-for-xcsp18' directory.
  - *(Sequential CSP) with -both option*
    #+BEGIN_SRC sh
    DIR/scop.sh 11g DIR/scop.jar -both DIR/MapleCOMSPS/simp/minisat_release default TMPDIR BENCHNAME
    #+END_SRC
  - *(Sequential CSP) with -order option*
    #+BEGIN_SRC sh 
    DIR/scop.sh 11g DIR/scop.jar -order DIR/MapleCOMSPS/simp/minisat_release default TMPDIR BENCHNAME
    #+END_SRC
  - *(Parallel CSP) with -both option*
    #+BEGIN_SRC sh
    DIR/scop.sh 22g DIR/scop.jar -both DIR/syrup/bin/glucose-syrup -model:-nthreads=NBCORE:-maxmemory=20000 TMPDIR BENCHNAME
    #+END_SRC
  - *(Parallel CSP) with -order option*
    #+BEGIN_SRC sh
    DIR/scop.sh 22g DIR/scop.jar -order DIR/syrup/bin/glucose-syrup -model:-nthreads=NBCORE:-maxmemory=20000 TMPDIR BENCHNAME
    #+END_SRC

* Example (please refer http://xcsp.org/series for example XCSP3 instances)
  - (NOTE) we here assume 11GB/24GB can be allocated to JVM. This is
    XCSP18 competition setting but if possible larger size is
    preferred. 
  - assume that the following command is executed in the 'scop-for-xcsp18' directory.
#+BEGIN_SRC sh
./scop.sh 16g scop.jar -both MapleCOMSPS/simp/minisat_release default /tmp examples/AllInterval-007.xml
#+END_SRC

* License
  - see [[file:LICENSE.txt][LICENSE.txt]]

* Contact
  - please e-mail to [[http://kix.istc.kobe-u.ac.jp/~soh/][Takehide Soh]]

* Links for Related Tool

| [[http://kix.istc.kobe-u.ac.jp/~soh/scarab/][Scarab]]     | a very light weight SAT-based CP System                                                  |
| [[http://kix.istc.kobe-u.ac.jp/~soh/dsugar/][Diet-Sugar]] | A SAT-based CSP Solver Equipped with Hybrid Encoding integrating Order and Log Encodings |
| [[http://www.sat4j.org][Sat4j]]      | SAT solver in Java, which Scarab adopts!                                                 |
| [[http://bach.istc.kobe-u.ac.jp/sugar/][Sugar]]      | SAT-based CSP Solver using order encoding.                                               |
| [[http://bach.istc.kobe-u.ac.jp/copris/][Copris]]     | Copris is a constraint programming DSL embedded in Scala.                                |
|            | It is also developed by our team!                                                        |
| [[https://github.com/crillab/nacre_mini][NACRE]]      | NACRE (Nogood And Clause Reasoning Engine) is a constraint solver written in C++.        |
| [[https://github.com/eomahony/Numberjack][Numberjack]] | Constraint Programming System in Python                                                  |
| [[http://code.google.com/p/scalasmt/][scalasmt]]   | SMT in Scala using Z3                                                                    |
| [[https://bitbucket.org/oscarlib/oscar][OscaR]]      | OR in Scala                                                                              |
| [[http://jacop.osolpro.com/][JaCoP]]      | Constraint programming in Java and Scala                                                 |
| [[http://www.emn.fr/x-info/choco-solver/][Choco]]      | Constraint programming in Java                                                           |
| [[http://jcp.org/en/jsr/detail?id%3D331][JSR 331]]    | Java Specification Requests: Constraint Programming API                                  |
| [[http://amit.metodi.me/research/bee/][BEE]]        | a compiler which enables to encode finite domain constraint problems to CNF.             |
| [[http://jason.matf.bg.ac.rs/~mirkos/Mesat.html][meSAT]]      | Multiple Encodings of CSP to SAT                                                         |

# | [[http://lara.epfl.ch/web2010/scp][SCP]]        | Constraint Programming in Scala using Z3                                                 |



